/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   cub2.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kdrissi- <kdrissi-@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2020/12/17 08:41:39 by kdrissi-          #+#    #+#             */
/*   Updated: 2020/12/21 23:04:15 by kdrissi-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../include/cub3d.h"
int main()
{
    player.px = WIN_SIZE/2;
    player.py = WIN_SIZE/2;
    player.pa = PI / 2;
    player.pdx = cos(player.pa) * 5;
    player.pdy = sin(player.pa) * 5;
    data.mlx_ptr = mlx_init();
    data.win_ptr = mlx_new_window(data.mlx_ptr, WIN_SIZE, WIN_SIZE, "kaw-kab");
    drawMap(0,0);
    DrawFilledCircle (player.px, player.py, 10);
    mlx_key_hook(data.win_ptr, buttons, (void *)0);
    mlx_loop(data.mlx_ptr);
}
int    buttons(int key, void *param)
{
    int moveSpeed = 10;
    float rotationSpeed = 10*(PI/180);
    if (key == UP_ARROW && player.px < WIN_SIZE - 10  && player.px  > -10)
    { 
        player.py -= player.pdy;
        player.px +=player.pdx;
    }
    if (key == DW_ARROW && player.px < WIN_SIZE  && player.px > 0)
    { 
        player.py += player.pdy;
        player.px +=player.pdx;
        printf("[%f]\n", player.pdx);
        printf("[%f]\n", player.pdy);
    }
   else if (key == LF_ARROW && player.py < WIN_SIZE && player.py >= 10)
    {          //printf("(%f)\n", rotationSpeed);

        player.pa -= rotationSpeed;
        if(player.pa < 0)
            player.pa += 2*PI;
        // player.pdx = cos(player.pa) * 5;
        // player.pdy = sin(player.pa) * 5;
    }
  else  if (key == RT_ARROW && player.py < WIN_SIZE - 10 && player.py  >= 0)
    {
        player.pa += rotationSpeed;
        if(player.pa > 2*PI)
            player.pa -= 2*PI;
        // player.pdx = cos(player.pa) * 5;
        // player.pdy = sin(player.pa) * 5;
    }
    mlx_clear_window (data.mlx_ptr, data.win_ptr);
    DrawFilledCircle(player.px, player.py, 10);
    drawRay (player.px, player.px);
    drawMap(0,0);
    return(0);
}